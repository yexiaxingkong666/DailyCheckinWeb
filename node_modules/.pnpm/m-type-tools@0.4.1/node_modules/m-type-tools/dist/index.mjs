const isSymobl = (v) => {
  return typeof v === "symbol";
};
const isString = (v) => {
  return typeof v === "string";
};
const isNumber = (v) => {
  return typeof v === "number";
};
const isBoolean = (v) => {
  return typeof v === "boolean";
};
const isArray = (v) => {
  return Array.isArray(v);
};
const isFunction = (v) => {
  return typeof v === "function";
};
const isObject = (v) => {
  return typeof v === "object" && v !== null;
};
const { constructor } = Object.getPrototypeOf(
  async function() {
  }
);
const isAsyncFunciton = (v) => {
  return typeof v === "function" && v instanceof constructor;
};
const isSet = (v) => {
  return v instanceof Set;
};
const isWeakSet = (v) => {
  return v instanceof WeakSet;
};
const isMap = (v) => {
  return v instanceof Map;
};
const isWeakMap = (v) => {
  return v instanceof WeakMap;
};
const isPromise = (v) => {
  return v instanceof Promise;
};

export { isArray, isAsyncFunciton, isBoolean, isFunction, isMap, isNumber, isObject, isPromise, isSet, isString, isSymobl, isWeakMap, isWeakSet };
